from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from bot.states.forms import AuthForm
from bot.keyboards.employee_kb import get_employee_menu, get_profile_menu
from bot.keyboards.admin_kb import get_admin_menu

router = Router()


@router.message(CommandStart(), StateFilter(default_state))
async def cmd_start(message: Message, state: FSMContext, employee: dict = None, api_client=None):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if employee:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if employee["role_id"] == 1 else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        keyboard = get_admin_menu() if employee["role_id"] == 1 else get_employee_menu()

        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {employee['name']} {employee['patronymic']}!\n"
            f"–†–æ–ª—å: {role_name}",
            reply_markup=keyboard
        )
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫!\n\n"
            "üîê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AuthForm.login)


@router.message(AuthForm.login)
async def process_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
    await state.update_data(login=message.text)
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthForm.password)


@router.message(AuthForm.password)
async def process_password(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    data = await state.get_data()
    login = data.get("login")
    password = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await message.delete()

    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    employee = await api_client.login(login, password)

    if not employee:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:"
        )
        await state.set_state(AuthForm.login)
        return

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
    success = await api_client.link_telegram(employee["employee_id"], message.from_user.id)

    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if employee["role_id"] == 1 else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    keyboard = get_admin_menu() if employee["role_id"] == 1 else get_employee_menu()

    await message.answer(
        f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
        f"üë§ {employee['surname']} {employee['name']} {employee['patronymic']}\n"
        f"üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.get('post', {}).get('name_post', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üè¢ –û—Ç–¥–µ–ª: {employee.get('otdel', {}).get('name_otdel', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üëî –†–æ–ª—å: {role_name}",
        reply_markup=keyboard
    )

    await state.clear()


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, employee: dict = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if employee["role_id"] == 1 else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–§–ò–û: {employee['surname']} {employee['name']} {employee['patronymic']}\n"
        f"–õ–æ–≥–∏–Ω: {employee['login']}\n"
        f"–†–æ–ª—å: {role_name}\n"
        f"Telegram ID: {employee['tg_id']}"
    )

    await message.answer(profile_text, reply_markup=get_profile_menu(), parse_mode="HTML")


@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
async def logout(message: Message, employee: dict = None, api_client=None):
    """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram ID
    success = await api_client.unlink_telegram(employee["employee_id"])

    if success:
        await message.answer(
            "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")


@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, employee: dict = None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    keyboard = get_admin_menu() if employee["role_id"] == 1 else get_employee_menu()
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
