from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime

from bot.states.forms import OvertimeForm
from bot.keyboards.admin_kb import get_employees_inline, get_cancel_keyboard, get_admin_menu

router = Router()


@router.message(F.text == "‚ûï –û—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É")
async def start_overtime_registration(message: Message, state: FSMContext, is_admin: bool = False, api_client=None):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"""
    if not is_admin:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    employees = await api_client.get_all_employees()

    if not employees:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = get_employees_inline(employees)

    await message.answer(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await state.set_state(OvertimeForm.employee)


@router.callback_query(OvertimeForm.employee, F.data.startswith("emp_"))
async def select_employee(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employee_id = int(callback.data.split("_")[1])

    await state.update_data(employee_id=employee_id)
    await callback.message.delete()

    await callback.message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.2025)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –î–î.–ú–ú –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(OvertimeForm.date)
    await callback.answer()


@router.callback_query(OvertimeForm.employee, F.data == "cancel")
async def cancel_overtime(callback: CallbackQuery, state: FSMContext, employee: dict = None):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.delete()

    keyboard = get_admin_menu() if employee and employee["role_id"] == 1 else None
    await callback.message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    await callback.answer()


@router.message(OvertimeForm.date, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_overtime_message(message: Message, state: FSMContext, employee: dict = None):
    """–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await state.clear()

    keyboard = get_admin_menu() if employee and employee["role_id"] == 1 else None
    await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


@router.message(OvertimeForm.date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã"""
    date_str = message.text.strip()

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if len(date_str.split(".")) == 2:
            # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú (–¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            date = datetime.strptime(f"{date_str}.{datetime.now().year}", "%d.%m.%Y")
        else:
            # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date = datetime.strptime(date_str, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        if date > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        formatted_date = date.strftime("%Y-%m-%d")
        await state.update_data(date=formatted_date)

        await message.answer(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
            "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 4 —á–∞—Å–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4:",
            parse_mode="HTML"
        )

        await state.set_state(OvertimeForm.hours)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.10.2025 –∏–ª–∏ 25.10"
        )


@router.message(OvertimeForm.hours, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_hours(message: Message, state: FSMContext, employee: dict = None):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤"""
    await state.clear()

    keyboard = get_admin_menu() if employee and employee["role_id"] == 1 else None
    await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


@router.message(OvertimeForm.hours)
async def process_hours(message: Message, state: FSMContext, api_client, employee: dict = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        hours = int(message.text.strip())

        if hours < 1 or hours > 4:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        employee_id = data["employee_id"]
        date = data["date"]

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ
        result = await api_client.create_overtime(
            employee_id=employee_id,
            hours=hours,
            date=date,
            actiontype_id=1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ 1 = –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
        )

        if result:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            emp_info = await api_client.get_employee_info(employee_id)
            emp_name = f"{emp_info['surname']} {emp_info['name']}" if emp_info else f"ID {employee_id}"

            keyboard = get_admin_menu() if employee and employee["role_id"] == 1 else None

            await message.answer(
                f"‚úÖ <b>–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp_name}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                f"‚è∞ –ß–∞—Å–æ–≤: {hours}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4:")
