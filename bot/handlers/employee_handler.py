import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from datetime import datetime
from collections import defaultdict
import tempfile
from bot.keyboards.employee_kb import get_days_off_inline

router = Router()


@router.message(F.text == "üìä –ú–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è")
async def show_my_actions(message: Message, employee: dict = None, api_client=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    actions = await api_client.get_employee_actions(employee["employee_id"])

    if not actions:
        await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
    actions_by_month = defaultdict(list)
    for action in actions:
        date = datetime.strptime(action["date_action"], "%Y-%m-%d")
        month_key = date.strftime("%Y-%m")
        actions_by_month[month_key].append(action)

    response = "üìä <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"

    for month, month_actions in sorted(actions_by_month.items(), reverse=True):
        month_name = datetime.strptime(month, "%Y-%m").strftime("%B %Y")
        response += f"<b>{month_name}</b>\n"

        for action in sorted(month_actions, key=lambda x: x["date_action"], reverse=True):
            response += (
                f"  üìÖ {action['date_action']}\n"
                f"  üìù {action['action_type_name']}\n"
                f"  ‚è∞ {action['hours']} —á.\n\n"
            )

    await message.answer(response, parse_mode="HTML")


@router.message(F.text == "‚è∞ –ú–æ–∏ —á–∞—Å—ã")
async def show_my_hours(message: Message, employee: dict = None, api_client=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–∞—Ö"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    actions = await api_client.get_employee_actions(employee["employee_id"])

    # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month = datetime.now().strftime("%Y-%m")
    month_hours = 0

    if actions:
        for action in actions:
            action_date = datetime.strptime(action["date_action"], "%Y-%m-%d")
            if action_date.strftime("%Y-%m") == current_month:
                month_hours += action["hours"]

    idle_hours = employee.get("idle_hours", 0)

    response = (
        f"‚è∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–∞—Ö</b>\n\n"
        f"üìÖ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <b>{month_hours}</b> —á.\n"
        f"üí§ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: <b>{idle_hours}</b> —á.\n\n"
        f"‚ÑπÔ∏è –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π."
    )

    await message.answer(response, parse_mode="HTML")


@router.message(F.text == "üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ")
async def show_days_off(message: Message, employee: dict = None, api_client=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (–≥–¥–µ actiontype = –≤—ã—Ö–æ–¥–Ω–æ–π)"""
    if not employee:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    actions = await api_client.get_employee_actions(employee["employee_id"])

    if not actions:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ actiontype_id = 2 —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π)
    days_off = [a for a in actions if "–≤—ã—Ö–æ–¥–Ω–æ–π" in a["action_type_name"].lower() or a["actiontype_id"] == 1]

    if not days_off:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.")
        return

    response = "üìÖ <b>–í–∞—à–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏:</b>\n\n"
    response += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –≤—ã—Ö–æ–¥–Ω–æ–º –¥–Ω–µ:\n\n"

    keyboard = get_days_off_inline(days_off)

    await message.answer(response, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("document_"))
async def request_document(callback: CallbackQuery, api_client):
    action_id = int(callback.data.split("_")[1])
    await callback.answer("üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏...")

    file_bytes = await api_client.get_holiday_document_by_action(action_id)
    if not file_bytes:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    with tempfile.NamedTemporaryFile(suffix='.doc', delete=False) as tmp:
        tmp.write(file_bytes)
        temp_filepath = tmp.name

    try:
        input_doc = FSInputFile(temp_filepath, filename=f"holiday_document_{action_id}.doc")
        await callback.message.answer_document(document=input_doc)
    finally:
        if os.path.exists(temp_filepath):
            os.unlink(temp_filepath)